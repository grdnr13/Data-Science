### NumPy import하기

```python
import numpy as np
# 버전 확인하기
np.__version__
```

### 파이썬 데이터 타입

C, Java와 다르게 동적 타입 체계를 가지고 있다. ⇒변수 데이터 타입을 명시적으로 선언할 필요 없음

파이썬 변수는 값뿐만 아니라 값의 유형에 대한 부가 정보도 담고 있다.

### 파이썬 정수는 정수 이상이다

파이썬 3.6의 단일 정수는 다음의 구성요소를 갖는 구조체다:

- ob_refcnt: 메모리 할당과 해제를 처리하게 돕는 참조 횟수
- ob_type: 변수 타입 인코딩
- ob_size: 다음 데이터 멤버의 크기 지정
- ob_digit: 파이썬 변수가 나타내는 실제 정숫값 포함

⇒ 파이썬에서 정수를 저장할 때에는 C에 비해 오버헤드가 있다.

### 파이썬 리스트는 리스트 이상이다

리스트 = 파이썬에서 여러 요소를 담는 가변적 표준 컨테이너

```python
# 정수 리스트 만들기
L = list(range(10))
# 문자열 리스트 만들기
L2 = [str(c) for c in L]
# 서로 다른 데이터 타입의 요소 담는 리스트 만들기
L3 = [True, "2", 3.0, 4]
[type(item) for item in L3]
# Out: [bool, str, float, int]
```

서로 다른 데이터 타입의 요소를 담는 유연성을 위해, 리스트의 각 항목에는 타입 정보와 참조 횟수 등의 정보가 들어간다. 각 항목이 완전한 파이썬 객체와 마찬가지

모든 변수가 같은 타입인 경우 중복 생김 → 고정 타입 배열 사용

### 파이썬의 고정 타입 배열

내장 array 모듈 이용해서 단일 타입의 dense array 만들 수 있음

```python
import array
L = list(range(10))
A = array.array('i', L)
```

‘i’ : 정수 타입 코드

**NumPy 패키지의 ndarray 객체** : 데이터에 효율적 연산 추가

### 파이썬 리스트에서 배열 만들기

```python
import numpy as np
# np.array 사용해서 파이썬 리스트에서 배열 만들기 -> 배열의 모든 요소가 같은 타입이어야 함
np.array([1,2,4,5,6])
# 명시적으로 데이터 타입 설정 - dtype 이용
np.array([1,2,3,4], dtype='float32')
# 명시적으로 다차원 가능 -> 리스트 중첩
np.array([range(i, i+3) for i in [2,4,6]])
```

NumPy 배열은 모든 요소가 같은 타입이어야 한다. → 같은 타입이 아니면 상위 타입을 취함

명시적으로 배열의 데이터 타입을 설정하고 싶으면 `dtype` 키워드를 사용한다. 

다차원 배열을 명시적으로 사용할 수 있다. 

```python
# 0으로 채운 길이 5의 부동 소수점 배열 만들기
np.zeros(5, dtype=float)
# 1으로 채운 2*4 정수 배열 만들기
np.ones((2,4), dtype=int)
# 2.13으로 채운 3*4 배열 만들기
np.full((3,4), 2.13)

# 선형 수열로 배열 만들기
np.arange(1,17,3) # Out: array([1,4,7,10,13,16])
# a와 b 사이에 일정한 간격의 n개 값으로 채운 배열
np.linspace(a,b,n)

#난수로 배열 채우기 -> 3*4크기
# 1. 0과 1 사이의 난수 이용
np.random.random((3,4))
# 2. 정규 분포의 난수 이용 (평균=m, 표준편차=d)
np.random.normal(m,d,(3,4))
# 3. [a,b] 구간의 임의의 정수로 채우기
np.random.randint(a,b,(3,4))
# 4. 4*4 크기 행렬 만들기
np.eye(4)
# 5. 4개의 정수를 갖는 초기화되지 않은 배열 생성
np.empty(4) # 기존에 메모리 위치에 있던 값으로 채워짐
```

### NumPy 표준 데이터 타입

```python
# 배열 데이터 타입을 지정하기
# 1. 문자열 이용
np.ones(10, dtype='int16')
# 2. NumPy 객체 이용
np.ones(10, dtype=np.int16)
```

| bool_ | bool값 (1바이트) |
| --- | --- |
| int_ | 기본 정수 타입 (C의 long과 동일하다. 주로 int32 또는 int64) |
| intp | 인덱싱에 사용하는 정수 (C의 ssize_t와 동일. int32 또는 int64) |
| int8 / int16 / int32 / int64 | 바이트(-128~127) / 정수 (각 -2^8 ~ 2^8-1 / -2^16 ~ 2^16-1 / -2^32 ~ 2^32-1 ) |
| uint8 / uint16 / uint32 / uint64 | 부호 없는 정수 (각 0 ~ 255 / 0 ~ 2^16-1 / 0 ~ 2^32 - 1 /  0 ~ 2^64 - 1) |
| float_ | float64 |
| float16 | 반정밀 부동 소수점: 부호비트, 5비트 지수, 10비트 기수 |
| float32 | 단정밀 부동 소수점: 부호비트, 8비트 지수, 23비트 기수 |
| float64 | 배정밀 부동 소수점: 부호비트, 11비트 지수, 53비트 기수 |
| complex_ | complex64 |
| complex64 / complex128 | 복소수, 두 개의 32비트/64비트 부동 소수점으로 표현 |
